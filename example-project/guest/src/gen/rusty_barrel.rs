// Generated by `wit-bindgen` 0.4.0. DO NOT EDIT!
#[allow(clippy::all)]
pub fn print() {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
    unsafe {
        #[link(wasm_import_module = "$root")]
        extern "C" {
            #[cfg_attr(target_arch = "wasm32", link_name = "print")]
            #[cfg_attr(not(target_arch = "wasm32"), link_name = "$root_print")]
            fn wit_import();
        }
        wit_import();
    }
}
pub trait RustyBarrel {
    fn init();
}

#[doc(hidden)]
pub unsafe fn call_init<T: RustyBarrel>() {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, string::String, vec::Vec};

    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch = "wasm32")]
    wit_bindgen::rt::run_ctors_once();

    T::init();
}

/// Declares the export of the component's world for the
/// given type.

macro_rules! export_rusty_barrel(($t:ident) => {
  const _: () = {

    #[doc(hidden)]
    #[export_name = "init"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __export_rusty_barrel_init() {
      call_init::<$t>()
    }

  };

  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = __force_section_ref;
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  fn __force_section_ref() {
    __link_section()
  }
});

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:rusty-barrel"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 202] = [
    2, 0, 3, 119, 105, 116, 6, 112, 108, 117, 103, 105, 110, 12, 114, 117, 115, 116, 121, 45, 98,
    97, 114, 114, 101, 108, 0, 97, 115, 109, 12, 0, 1, 0, 7, 71, 1, 65, 2, 1, 65, 3, 1, 64, 0, 1,
    0, 3, 5, 112, 114, 105, 110, 116, 0, 1, 0, 4, 4, 105, 110, 105, 116, 0, 1, 0, 4, 12, 114, 117,
    115, 116, 121, 45, 98, 97, 114, 114, 101, 108, 24, 112, 107, 103, 58, 47, 112, 108, 117, 103,
    105, 110, 47, 114, 117, 115, 116, 121, 45, 98, 97, 114, 114, 101, 108, 4, 0, 0, 68, 9, 112,
    114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45,
    98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 5, 48, 46, 55,
    46, 52, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 5, 48,
    46, 52, 46, 48, 11, 23, 1, 6, 112, 108, 117, 103, 105, 110, 11, 112, 107, 103, 58, 47, 112,
    108, 117, 103, 105, 110, 3, 0, 0,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
